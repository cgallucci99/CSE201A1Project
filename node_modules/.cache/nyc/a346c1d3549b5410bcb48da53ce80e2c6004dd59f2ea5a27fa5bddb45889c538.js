var cov_1a6nfrlwr4=function(){var path="/home/cgallucci/Desktop/Fall_2019/CSE201/CSE201A1Project/models/user.js";var hash="ec438a88e4c6c968aac1c3d4bb6a0ab788e8918a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/cgallucci/Desktop/Fall_2019/CSE201/CSE201A1Project/models/user.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:32}},"1":{start:{line:4,column:0},end:{line:53,column:2}},"2":{start:{line:5,column:13},end:{line:36,column:3}},"3":{start:{line:40,column:2},end:{line:42,column:4}},"4":{start:{line:41,column:4},end:{line:41,column:55}},"5":{start:{line:43,column:2},end:{line:45,column:5}},"6":{start:{line:44,column:4},end:{line:44,column:81}},"7":{start:{line:46,column:2},end:{line:48,column:3}},"8":{start:{line:47,column:4},end:{line:47,column:67}},"9":{start:{line:49,column:2},end:{line:51,column:3}},"10":{start:{line:50,column:4},end:{line:50,column:100}},"11":{start:{line:52,column:2},end:{line:52,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:17},end:{line:4,column:18}},loc:{start:{line:4,column:48},end:{line:53,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:40,column:33},end:{line:40,column:34}},loc:{start:{line:40,column:52},end:{line:42,column:3}},line:40},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:20},end:{line:43,column:21}},loc:{start:{line:43,column:28},end:{line:45,column:3}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:46,column:42},end:{line:46,column:43}},loc:{start:{line:46,column:61},end:{line:48,column:3}},line:46},"4":{name:"(anonymous_4)",decl:{start:{line:49,column:19},end:{line:49,column:20}},loc:{start:{line:49,column:31},end:{line:51,column:3}},line:49}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"ec438a88e4c6c968aac1c3d4bb6a0ab788e8918a"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();var bcrypt=(cov_1a6nfrlwr4.s[0]++,require("bcryptjs"));//
// Creating our User model
cov_1a6nfrlwr4.s[1]++;module.exports=function(sequelize,DataTypes){cov_1a6nfrlwr4.f[0]++;var User=(cov_1a6nfrlwr4.s[2]++,sequelize.define("User",{// The email cannot be null, and must be a proper email before creation
email:{type:DataTypes.STRING,allowNull:false,unique:true,validate:{isEmail:true}},// The password cannot be null
password:{type:DataTypes.STRING,allowNull:false},firstName:{type:DataTypes.STRING,allowNull:false},lastName:{type:DataTypes.STRING,allowNull:false},admin:{type:DataTypes.BOOLEAN,defaultValue:false}},{timestamps:false}));// Creating a custom method for our User model. 
//This will check if an unhashed password entered by the 
//user can be compared to the hashed password stored in our database
cov_1a6nfrlwr4.s[3]++;User.prototype.validPassword=function(password){cov_1a6nfrlwr4.f[1]++;cov_1a6nfrlwr4.s[4]++;return bcrypt.compareSync(password,this.password);};cov_1a6nfrlwr4.s[5]++;User.beforeCreate(user=>{cov_1a6nfrlwr4.f[2]++;cov_1a6nfrlwr4.s[6]++;user.password=bcrypt.hashSync(user.password,bcrypt.genSaltSync(10),null);});cov_1a6nfrlwr4.s[7]++;User.prototype.generateHashedPassword=function(password){cov_1a6nfrlwr4.f[3]++;cov_1a6nfrlwr4.s[8]++;return bcrypt.hashSync(password,bcrypt.genSaltSync(10),null);};cov_1a6nfrlwr4.s[9]++;User.associate=models=>{cov_1a6nfrlwr4.f[4]++;cov_1a6nfrlwr4.s[10]++;User.belongsToMany(models.Book,{as:'Book',through:models.UsersBookList,foreignKey:'id'});};cov_1a6nfrlwr4.s[11]++;return User;};